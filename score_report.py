import pandas as pd
import os
import datetime
from reportlab.platypus import (
    BaseDocTemplate, Frame, PageTemplate, Table, TableStyle,
    Paragraph, Spacer, PageBreak, Image as RLImage
)
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.lib.utils import ImageReader
import cairosvg

def generate_pdf(output_path, data_df, heading, subheading, author, course_name, assessment_name,
                 staple_logo_path, uni_logo_path):

    pdf_path = os.path.splitext(output_path)[0] + "_report.pdf"
    styles = getSampleStyleSheet()
    elements = []

    # Title Page
    elements.append(RLImage(uni_logo_path, width=2 * inch, height=2 * inch, kind='proportional'))
    elements.append(Spacer(1, 24))
    elements.append(RLImage(staple_logo_path, width=1.7 * inch, height=1.7 * inch, kind='proportional'))
    elements.append(Spacer(1, 24))
    elements.append(Paragraph(heading, styles['Title']))
    elements.append(Spacer(1, 6))
    elements.append(Paragraph(subheading, styles['Normal']))
    elements.append(Spacer(1, 6))
    elements.append(Paragraph(f"Assessment: {assessment_name}", styles['Normal']))
    elements.append(Spacer(1, 6))
    elements.append(Paragraph(author, styles['Normal']))
    elements.append(Spacer(1, 24))
    elements.append(Paragraph(
        "Report generated by the S.T.A.P.L.E. system, designed by School of Biosciences' TEL Team, University of Liverpool.",
        styles['Italic']
    ))
    elements.append(PageBreak())

    # Score Table
    elements.append(Paragraph("Student Scores", styles['Heading2']))
    table_data = [data_df.columns.tolist()] + data_df.astype(str).values.tolist()
    table = Table(table_data, repeatRows=1)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#003366")),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, 0), 10),
        ('FONTSIZE', (0, 1), (-1, -1), 9),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 6),
        ('TOPPADDING', (0, 1), (-1, -1), 4),
        ('GRID', (0, 0), (-1, -1), 0.25, colors.grey),
    ]))
    elements.append(table)

    # Footer
    def add_footer(canvas, doc):
        footer_text = "For more information about the S.T.A.P.L.E. system please contact Dr. Robert Treharne (R.Treharne@liverpool.ac.uk)."
        canvas.saveState()
        canvas.setFont('Helvetica-Oblique', 7)
        canvas.setFillColor(colors.grey)
        canvas.drawCentredString(A4[0] / 2, 20, footer_text)

        staple_img = ImageReader(staple_logo_path)
        orig_width, orig_height = staple_img.getSize()
        display_width = 45
        aspect = orig_height / orig_width
        display_height = display_width * aspect
        canvas.drawImage(staple_logo_path,
                         A4[0] - display_width - 10,
                         5,
                         width=display_width,
                         height=display_height,
                         mask='auto')
        canvas.drawRightString(A4[0] - display_width - 14, 20, f"Page {doc.page}")
        canvas.restoreState()

    doc = BaseDocTemplate(pdf_path, pagesize=A4)
    frame = Frame(doc.leftMargin, doc.bottomMargin + 30, doc.width, doc.height - 40, id='normal')
    template = PageTemplate(id='with-footer', frames=frame, onPage=add_footer)
    doc.addPageTemplates([template])
    doc.build(elements)

    print(f"\nðŸ“„ PDF report saved to: {pdf_path}")

def main():
    file_path = input("Enter the path to scored_answers.csv: ").strip()
    author_name = input("Enter the name of the person generating the report: ").strip()
    course_name = input("Enter the course name: ").strip()
    assessment_name = input("Enter the assessment name: ").strip()

    df = pd.read_csv(file_path)
    df = df[['student_id', 'student_name', 'percentage_score']].copy()
    df = df.sort_values(by='student_name')

    report_date = datetime.datetime.now().strftime("%d %B %Y")
    report_heading = "Score Report"
    report_subheading = f"Course: {course_name}"
    report_author = f"Report generated by {author_name} on {report_date}"

    uni_logo_png = "logo_converted.png"
    if not os.path.exists(uni_logo_png):
        cairosvg.svg2png(url="logo.svg", write_to=uni_logo_png)

    generate_pdf(file_path, df, report_heading, report_subheading, report_author,
                 course_name, assessment_name, "staple.png", uni_logo_png)

if __name__ == "__main__":
    main()
